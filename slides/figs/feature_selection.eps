%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 425.000000 317.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.16 (Build 20F71) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 425 317
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 425 317
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: AvenirNext-Regular
%!FontType1-1.0: AvenirNext-Regular 1.0000.2.0000
/FontInfo 1 dict dup begin
/FSType 4 def
end readonly def
14 dict begin
/FontName /AvenirNext-Regular def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /C put
dup 34 /l put
dup 35 /a put
dup 36 /s put
dup 37 /i put
dup 38 /fi put
dup 39 /c put
dup 40 /d put
dup 41 /o put
dup 42 /r put
dup 43 /n put
dup 44 /j put
dup 45 /u put
dup 46 /t put
dup 47 /space put
dup 48 /e put
dup 49 /m put
dup 50 /v put
dup 51 /ccedilla put
dup 52 /atilde put
dup 53 /iacute put
dup 54 /S put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -394 1 index div -411 2 index div 1309 3 index div 1192 5 -1 roll div]cvx def
/sfnts [<

240097002400A7002400B7002400C70024000D5D410500D6002400E6002400025D3031250E0323222E0235343E0233321E0217072E0323220E0215141E023332363702B21233435130508862373863874F274B4236123C0B25323B22456D4C28294C6D443D6E25721B3024153863885151886338101D291A2C11221A103255703E3E70553232370000010032FFEE01F802D600370181B800382FB800252F410500DA002500EA002500025D411B0009002500190025002900250039002500490025005900250069002500790025008900250099002500A9002500B9002500C90025000D5DB80000D0B800002FB8003810B8002FD0B8002F2FB900080004F4411B0006000800160008002600080036000800460008005600080066000800760008008600080096000800A6000800B6000800C60008000D5D410500D5000800E5000800025DB8002510B900120004F4B80039DC00B800004558B800342F1BB90034000B3E59B800004558B800172F1BB9001700053E59B8003410B900030002F4410500D9000300E9000300025D411B0008000300180003002800030038000300480003005800030068000300780003008800030098000300A8000300B8000300C80003000D5DB8001710B900200002F4411B0007002000170020002700200037002000470020005700200067002000770020008700200097002000A7002000B7002000C70020000D5D410500D6002000E6002000025D3031012E0123220E0215141E02171E0315140E0223222E0227371E0133323E0235342E02272E0335343E023332161701B51748331A362C1B1A2B371E254B3C262941532A20403A32133E1753381B382D1D1D303E22234436212942502748661A0252202710213222222C1F140A0C1C2D4535354D32180D1A281A2E263311233322253121160B0B1C2D4230334A30163323000000020037FFF401C901E0002500360182B800372FB800002FB8003710B80020D0B800202FB9002B0004F4411B0006002B0016002B0026002B0036002B0046002B0056002B0066002B0076002B0086002B0096002B00A6002B00B6002B00C6002B000D5D410500D5002B00E5002B00025DB80006D0B800062FB8000010B9000F0004F4B8000010B80017D0B800172FBA00180000000F111239B8000010B80035D0B8000F10B80038DC00B800004558B8000A2F1BB9000A00093E59B800004558B800132F1BB9001300053E59B800004558B8001B2F1BB9001B00053E59BB00250001003600042BB8000A10B900030001F4410500D9000300E9000300025D411B0008000300180003002800030038000300480003005800030068000300780003008800030098000300A8000300B8000300C80003000D5DBA0018001B000A111239B8001B10B900300001F4411B000700300017003000270030







00>] def
/CharStrings 23 dict dup begin
/.notdef 0 def
/space 1 def
/C 2 def
/S 3 def
/a 4 def
/c 5 def
/d 6 def
/e 7 def
/i 8 def
/j 9 def
/l 10 def
/m 11 def
/n 12 def
/o 13 def
/r 14 def
/s 15 def
/t 16 def
/u 17 def
/v 18 def
/atilde 19 def
/ccedilla 20 def
/iacute 21 def
/fi 22 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 4 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] readonly def
/FontBBox {-394 -411 1309 1192} readonly def
/UniqueID 4446589 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB281E14745AF3F10450EAAB791828BD7007DC687000C5DB246371EAE04729BB2AC79527F618E21E8FC70CDC1C0C4693164D90DBF939B2062866EF88BDADB8FA3BE2CE73F06F26FB00FB8F4F2E18430F00BD97559383C8F0E0B03E9D3AB3084EFFA077678CAA7B0B4C1D4C8DA23EFCF8F132E12193E7B1C2E5B21B6841C8479D5D7D75417EE65D09938CE390F1DDEDA8140FD45CCFE16A2DFAAE2E97E2F5953EA04716CD8DF19F62121C6164897B492C561AF9A3DCC10D439561CADD61FCFBC93F934F32D27106E8AB870B89BBB33182311DFB8B33DC903FEAFB2AEBD060619CE12F9E48D11F0D31F349F0A674F5922EEFB72190302B5F82B77CCE9A10FBC00FDA41C1A473427A5F4428AE8E4ED930CD85E76B8B6DCD3DFB98D5BEC9D03CE70BFF070DEC2C3A0ADEFE411E99472E02F58692B8561844BD6B65C735EC7D7070865C1152CF2F31AE3E0ED3E2D0C286329D815AE5611FF334FBFFFDAAE69E2CB3A7206FBB7883423BED623669461FFB7DCC144A66B719AE19BEC83D18C824EC08AD67B1691D838C630D9C91AB034A189C892D15DA2F1BD6C423252BCFF54C7FA6B9D08D213BBABF1286C304AE8EC084B838E579404890AAD5516971375FEACAB4446BCEA1BFF41989CC644F941775E018E292636A9E7659F639EC832722EE2EA1957038518411C93F4FF4F4160A4B8F8325037CA12C53E4A40CC72C44D9886D92E2F26398625A1369B70313A5216D751DF6295D9CF74D09D9C514AFA4107B6AC56098B3E8369DB

CDC4A36FE5680F1956031B9D4762E70214A5DB70A381249CA544134F7F5B696E157200159FDCCB95A9F67CAFE7DB7D13E7C5E593FE71A86DF94666F8EDAB38AE23FCA153A4AE7FF168DF1250A461466C0EBE3E3889DA08411A28270B160FC3CCB9DB54B5ED7258E8E7A72D0DDB4F50CCE368B751FC07DB4975518AC75C3B61C3FEF9AE724CA76D5F45AFFC1384445A8B21B0EC2BA5354E3144355AD9DC643B253384611AD913D8E37234E2DA64C8724A786DAF7E50D42CD343491500F1983F8EBC578400E51E8B3C30B125354EF2C2CD0A40DCEC7D1C608236CF4DA0BF1E18B75EDEE03702808534B1461F1E36E37E60804C161E7E48E0F3AFD2B850A88CDE11233FB98775FE4056A65921A5A256DAC2DDBA2A1AD585565E8DE709B0F2E2F8F2D2876E55DA3FA1A8A047BB723BB17EB194BD7D3E2FE8A64777670FA063BB3569D367D7A65C3A73FA262C15BA80220E9D41DAD193D82DB6B69789F4B228D920FE79D62D178A72AD06F36C2388AB7C6ED19BF37030914486CB80E16AC74C660179B7D994DAA0D3C0AC218816ACB3123F7C488DE4C6200184A855A65D97EBCDD12F916E9651A5AECBFB1F74B80540945C312A05AC59BE97A09681F31A93AF448924D8BC8A8AA484943CF135E11A397750DE1EA0D4D43FC1C2026AB4DC62EBF1A9CCC9F171C3310315D541F751B68FA9851421D44570FED756E589AF60402330C258ED13C28058ACA3A303E2301FB14FB168132E0D72F42341E10792E4612664D5C7CC0C56265219595D0F85B522C0B4AB578A014D5996D34281AD9715A53077A7C7A7490BED7689E44897B7350E97588816D07EC7C46653E52C2465B5D744A09280285D7FECFA6DD4D3252EFED5C24E98442C77098DF7675501B674E9749C83FDE38A3FA4C3A4E2F9E751E7815D2C7699099CB12479E8EF64EE3DECBEE6DC0986D90668905CE294C4478F2C229FBAB93FB795078D5B0297052D5F3F358A56BD67E00A5C962C16321A8F9BE7086513F36B90E3E6FCFF9951417D8A1C4B2FC10B2E55C23553AF2785DD3CDB14E8AF3E405E2E2838C52AA8F587E3000BC5A5C33EC81CC0626B4B25732B9EE2A2D8F6823D4E643AAE00B0FD20DE92EB1A2F8CEA326E3021E8D3EAB2F6E66DB21DA39790D05B5B0BC802106A59C440C6587D7E024471FA4730CA3CD7F8B760975DE3D1A62096D95E61B213A41D0290264207CCB1F7F82D97B72D916B1F9784E97E2AAA913241B38BCD263CC7CAA1B92C1E41D4474FCC640EDF7942F57EABC0315CCD735E6533C60A3C3576010C98A47E435EA8DA889E019B866FA0229F637BB1EAEC3191ED129DD51D7797CD9E87361BC740576456E702E0C852B851EC2CDDB926CE5BE40E4CDACDA01A428B66458DF71F0F14D11EDAB37D4EABBC186DBA21EF61BFD5E57ECC7205A096BB4AEEB4BB9B89A8D334B664D9
1DDD7E43A9A098B2861F50D67C87D2716C9DE7CDE0FAEF392463FD0309CC547B61005993DE623F4C7034B7C87E147A54AE281385E52AD203EC02D26E3AC6777697DAB678256A5B0A1A421F7342CED7F305D1FE6E71BCD130278419BF2D782AC932AFE80DACFEE73503602F3E3D893E3B2A6119111D5BFA7475498F1DC0B8922D8434D8160DC3D8F24543E0C8F165E27A8CB54FB63F37CC306BDE082AB246FF1689ECF5C09E9D0B94DAE15752FE456F778427D2BE916E59A8D1A46F0A647F0FEF832880461A35966DC7FFD824598083B9844340CA1977760DCB3E530F552ECE5F9DC785FF3FC924961D79E2E2AB256CD6881F59ADEE55B3E92EE2CC2FCD5CFA513DA4D08ED6B212DEBC0508CD3C20DB603A13310082DAB2E198D4F9C20E73D99AF3C02C5A49665457C2EA14B0BD8A6D107525BD8A2AABEFB36E2EBCD7AD58DECD799DA0D3B2660941C1CF739EC6BA76F8E6A5DB15B4BC2DB660AD2AF437F78CC47D79E4168E3460A504D71E73A69F7051666E0A195D584FF5A0D14D21B2D70939CB987B204F8416BD40347035696A69BDF6BFD9FEDEBB26F7060220EB5F9430B1FAAAA8DAAF06A3813559D34CABE9470D6257CB17D7B51E2D0D07C6CAC745A9FCD1DEFA1B9A6A89F463713E93710E82C0EF7B1DF5A2A4FB05F78B31C7D1D8C3BA1BE860410F52A8CDC0B876E0ECF93E693DD56F622CC9564D7FEA946B4D4582365AF711F9ACEF4FD9472F001744AE08F3E329313FB4EA7E1140D713D9EC64637B0FE7AB4CBDE47C5B6C08A78EB3EE9C1C6CAB2AAC0338801742E0A317D13AB447B324BF28465AA292BA5D6217D2D35F701F84E995565D2CABD64424E52B7F4D0466A2893621F03121E57FEF6B78D318CD24BA90F192DA7294B741043D6E6F21B6162F159F652288BB3B5F52642FA9610FAFFDC850ACB3B79564EEF036B5D811B36F243085F5C2FBEEEC9CDC34BDAA40CB37FC3271A9FCD7A4FDE36431227BBD8362E17712C40430F4252B9BA3B25ABB1B4B48697A39BEF65ED3347F976E3ABBFB8CB925E2AFF32187B0D737A09D7A163490C62DA534EB4208D8C0F2173327209E3AD750B61205D81B861FC83B3ED24491D98CACDB9FFF017C4A9B7A2B5CCC33758120B9A9BE6DF791253EB53D17717792B3A11CEE36C41969B666B3CB9D4C97D823EF4EBEB021B07BD8FAE41BF24249168DDA2A90A0F2CADB221636501B27D754968A22D458E681029691F2E503ECCEA914AB986521A76296E8A1C1CC6195322711E0C529DE7D68C0FF71FF9424EFA8F56D8150AA2DEE12DBB2707E706C8D2FD61EF6D02BA69BBA0931FDD4CFF06C33049412D77D567DBE39AB6DB79B3498AF8CCC781720BBE8E86A20BD7F3F18ECE23D3C2E0E958768716C44C972051CDC84091F297C54C4BCA058906829EA1E0CF863AB528EC7D0D3769B541FAC8E2613046D
2D137B56538BD747081CF895FA63DFE701039214355952453DEABCEFD57DAC17494991BE043A9DEB3D2E9CD30B464411B0F13CCD45DB629189AF06F1BC6BC2247D033CDE96ED09534A52D0556F967101AFEDCE7078BE063BB9F0570C8F22A675E2CEEE32E9B7F7426DB851CF836DD01A538DF5089CE8118A62EED23F1076F3D2727EF65F4503E3601F9922A4D3BC68F9121603D40A9317FB09AFD8943ACC77B4F253E11EBA5D81D5FD00EB905456E603BEAF649F965F67C85621968DB9CB880067826CCC431E64EEC78D615661D02A8B8E33EE5B3D721D60CA53AB6B836B6FDE40A3E9A7138FABE73989341A55DA920D0DB58D72076CFE254FAD53A6DEA8CD506690EF148E461CBA4C43785B52201B01FF2BC4B8E22622AC668805CD4B4F45AC35552CBAF4F86EB2A6A94FA1F9DE6C0C861FC905C8BBAB6318D2D5F2524EEA676AA04674C1A577A7C056ED91A628BB348F8DC81B401FCD2343BA91CC12BA3DBC6A958784514E0D68A3079761FC3D1247F6D8C8F7B23543B6391D2C37574DF96AC10ED5886498478F16A859B4CE6B6018BC26B86C35BA66C5B90A33EB8953B62386BBA509B2F99023880220538766761128B53EEE74D22B369DB4D1BE8B2DD34EA2CAC171E32EC60F9950A63FFD5BE8C6C7AB958F343E38492E5CE6256A1767A389FA24F8EB2F3711ACCE08F36E7128357544B36767CF459832002B069D0FEEC1E6E3E52E0169396C69018753DBCCC83014DD932A2268A8DF61157168FD00B9054E0E9E98CB2D13840D90B6C8C783B45E4FBB0075AE06F8281DEDEE0534FE4BBB13619935786E6AFFE12FE0D4D97018DC043A81A5F42967361C51E921B89BFA03B43A81E09FCAB92E116E21BB44FA1E507EF87A83D120FADE93B33964A48109799BDD8A4D1597A32785C1A2F18D1DE423B327A452A3BBA68AF4AE51FFE1AFEF351803DAE77361844DCE2FAD57D2E5AEE44CCA7310922E2304C42935A1D0EDDE4801B3930855DC9A18268CB8A4F777C09810D08F216A4CF921DA83D85441B5E2B03A0262EF3DB837CE282A999C36AFE99EF05FF8AAA6DD26FE70CE8B16AE05D5AF70CB86A76468F7259251304FE7CECE0C535B54A8B9C7C094490A43E798E3CBB00DE0E74EB4D6E949654E55E566CE9B12EDA983B719B198BDDD42B604DC4C4BFE87E55EDD7AD49038776992D73DB1043AFD8729FA0201D7F8E7B083839B731317A491568ACAC745B017230D88B51B970FBD31F9FFEC48B82094238F38DB2CBD8E2EBF1E9BDC8F4C9BD0BBDD815DD7972B59BCE27E6A6ECAB83751413D4267CE73C5795B87D30E4BB8A47A254F2E52272EE2FE24874CCDAF1AFED4B2915E9563A2F634801F7C39E4940F40CF8BAA1CF277887E3B4858820A6923729D3A3B739D02FA4F93201710E05D5EF5137B22BECDE51575793F01B255756F63180462396604
515E0C6FB72531353D705BECF15FD85406C74239D999F2DE87D7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%APLT1End
%RBIEndFontSubset
/AvenirNext-Regular cguidfix
/F1.1/AvenirNext-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0.80000001 0.80000001 0.80000001 sc
q
0 0 425 317 rc
39.177906 225 m
39.177906 269 l
39.177906 272.03601 51.497906 274.5 66.67791 274.5 c
81.857903 274.5 94.17791 272.03601 94.17791 269 c
94.17791 225 l
94.17791 221.964 81.857903 219.5 66.67791 219.5 c
51.497906 219.5 39.177906 221.964 39.177906 225 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -118 417 cm
157.1779 192 m
157.1779 148 l
157.1779 144.964 169.49791 142.5 184.6779 142.5 c
199.85791 142.5 212.1779 144.964 212.1779 148 c
212.1779 192 l
212.1779 195.036 199.85791 197.5 184.6779 197.5 c
169.49791 197.5 157.1779 195.036 157.1779 192 c
157.1779 148 m
157.1779 151.036 169.49791 153.5 184.6779 153.5 c
199.85791 153.5 212.1779 151.036 212.1779 148 c
S
0 i
1 0.75 0.75 sc
CM
64.980003 126.5 m
92.480003 99 l
64.980003 71.5 l
37.48 99 l
h
64.980003 126.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -118 417 cm
182.98 290.5 m
210.48 318 l
182.98 345.5 l
155.48 318 l
h
182.98 290.5 m
S
/Cs2 SC
0 sc
0 i
/F1.1[ 12 0 0 -12 0 0]sf
148 281.5 m
(!"#$$%&'#\(\)*)[ 8.640000 3.024000 6.408000 5.328000 5.328000 3.000000 6.528000 6.000000 6.408000 7.644000 7.332000 0.000000 ] xS
150.47791 117.5 m
(!\)+,-+.\)/\(0)[ 8.496000 7.332000 6.972000 3.012000 6.972000 6.972000 3.804000 7.332000 3.000000 7.644000 0.000000 ] xS
151.3179 133.5 m
(.*0%+#10+.\))[ 3.804000 4.104000 6.864000 3.000000 6.972000 6.408000 10.596000 6.864000 6.972000 3.804000 0.000000 ] xS
307.08313 264.5 m
(!\)+,-+.\)/\(0)[ 8.496000 7.332000 6.972000 3.012000 6.972000 6.972000 3.804000 7.332000 3.000000 7.644000 0.000000 ] xS
315.24313 280.5 m
(2#"%\(#34\))[ 5.856000 6.408000 3.024000 3.000000 7.644000 6.408000 6.000000 6.408000 0.000000 ] xS
/Cs1 SC
0.75 1 0.75 sc
CM
351.90714 78 m
351.90714 122 l
351.90714 125.036 364.22714 127.5 379.40714 127.5 c
394.58713 127.5 406.90714 125.036 406.90714 122 c
406.90714 78 l
406.90714 74.963997 394.58713 72.5 379.40714 72.5 c
364.22714 72.5 351.90714 74.963997 351.90714 78 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -118 417 cm
469.90714 339 m
469.90714 295 l
469.90714 291.96399 482.22714 289.5 497.40714 289.5 c
512.58716 289.5 524.9071 291.96399 524.9071 295 c
524.9071 339 l
524.9071 342.03601 512.58716 344.5 497.40714 344.5 c
482.22714 344.5 469.90714 342.03601 469.90714 339 c
469.90714 295 m
469.90714 298.03601 482.22714 300.5 497.40714 300.5 c
512.58716 300.5 524.9071 298.03601 524.9071 295 c
S
0 i
0.80000001 0.80000001 0.80000001 sc
CM
195.78313 78 m
195.78313 122 l
195.78313 125.036 208.10313 127.5 223.28313 127.5 c
238.46313 127.5 250.78313 125.036 250.78313 122 c
250.78313 78 l
250.78313 74.963997 238.46313 72.5 223.28313 72.5 c
208.10313 72.5 195.78313 74.963997 195.78313 78 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -118 417 cm
313.78314 339 m
313.78314 295 l
313.78314 291.96399 326.10312 289.5 341.28314 289.5 c
356.46313 289.5 368.78314 291.96399 368.78314 295 c
368.78314 339 l
368.78314 342.03601 356.46313 344.5 341.28314 344.5 c
326.10312 344.5 313.78314 342.03601 313.78314 339 c
313.78314 295 m
313.78314 298.03601 326.10312 300.5 341.28314 300.5 c
356.46313 300.5 368.78314 298.03601 368.78314 295 c
S
/Cs2 SC
0 sc
0 i
457.77112 264.5 m
(!#*#'.0*5$.%'#$)[ 8.424000 6.408000 4.176000 6.408000 6.000000 3.804000 6.864000 4.320000 3.000000 5.328000 3.804000 3.000000 6.000000 6.408000 0.000000 ] xS
461.82114 280.5 m
($0"0'%\)+#\(#$)[ 5.328000 6.864000 3.024000 6.864000 6.000000 3.000000 7.332000 6.972000 6.408000 7.644000 6.408000 0.000000 ] xS
2 w
0.60000002 i
/Cs1 SC
0 0 0 sc
342 353 m
341.5 374.5 l
119.88086 374.5 l
120.5 172.5 l
137.60001 172.5 l
S
0 i
CM
29.200001 244.5 m
19.6 248.10001 l
19.6 240.89999 l
h
29.200001 244.5 m
f
0 J
0 j
1 0 0 -1 -118 417 cm
147.2 172.5 m
137.60001 168.89999 l
137.60001 176.10001 l
h
147.2 172.5 m
S
1 J
1 j
0.60000002 i
226.22113 318 m
283.32114 318 l
S
0 i
CM
174.92113 99 m
165.32114 102.6 l
165.32114 95.400002 l
h
174.92113 99 m
f
0 J
0 j
1 0 0 -1 -118 417 cm
292.92114 318 m
283.32114 314.39999 l
283.32114 321.60001 l
h
292.92114 318 m
S
/Cs2 SC
0 sc
200.55643 391.5 m
(60"034\)/\(0)[ 6.768000 6.864000 3.024000 6.864000 6.000000 6.408000 7.332000 3.000000 7.644000 0.000000 ] xS
192.51643 407.5 m
('#*#'.0*5$.%'#$)[ 6.000000 6.408000 4.176000 6.408000 6.000000 3.804000 6.864000 4.320000 3.000000 5.328000 3.804000 3.000000 6.000000 6.408000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
181.48 206.5 m
181.48 206.5 181.48 231.62619 181.48 247.59998 c
S
0 i
CM
63.48 159.8 m
67.080002 169.39999 l
59.880001 169.39999 l
h
63.48 159.8 m
f
0 J
0 j
1 0 0 -1 -118 417 cm
181.48 257.20001 m
185.08 247.60001 l
177.88 247.60001 l
h
181.48 257.20001 m
S
1 J
1 j
0.60000002 i
386.34512 318 m
443.44513 318 l
S
0 i
CM
335.04514 99 m
325.44513 102.6 l
325.44513 95.400002 l
h
335.04514 99 m
f
0 J
0 j
1 0 0 -1 -118 417 cm
453.04514 318 m
443.44513 314.39999 l
443.44513 321.60001 l
h
453.04514 318 m
S
ep
end
%%Trailer
%%EOF
