%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 416.000000 317.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.16 (Build 20F71) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 416 317
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 416 317
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: AvenirNext-Regular
%!FontType1-1.0: AvenirNext-Regular 1.0000.2.0000
/FontInfo 1 dict dup begin
/FSType 4 def
end readonly def
14 dict begin
/FontName /AvenirNext-Regular def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /A put
dup 34 /r put
dup 35 /q put
dup 36 /u put
dup 37 /i put
dup 38 /t put
dup 39 /e put
dup 40 /a put
dup 41 /C put
dup 42 /o put
dup 43 /n put
dup 44 /j put
dup 45 /space put
dup 46 /d put
dup 47 /m put
dup 48 /v put
dup 49 /l put
dup 50 /ccedilla put
dup 51 /atilde put
dup 52 /z put
dup 53 /O put
dup 54 /h put
dup 55 /p put
dup 56 /acircumflex put
dup 57 /s put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -394 1 index div -411 2 index div 1309 3 index div 1192 5 -1 roll div]cvx def
/sfnts [<



1200A7001200B7001200C70012000D5D410500D6001200E6001200025D3031012E0123220E0207051C0107211E0333323637170E0123222E0235343E0233321E0201BF034F49223A2C1A02018401FE7C011A2E3E24354D14332A653A34594025244056323754381D010E4257192B371E16071009233E2E1B312028352E25425A35355A4225253F540001005C000001F102F4001800C2B800192FB800082FB8001910B80015D0B800152FB900140004F4B80000D0B800002FB8000810B900070004F4B8001410B80017D0B8000710B8001ADC00B800004558B800032F1BB9000300093E59B800004558B800072F1BB9000700053E59B800004558B800142F1BB9001400053E59B8000310B9000E0001F4410500D9000E00E9000E00025D411B0008000E0018000E0028000E0038000E0048000E0058000E0068000E0078000E0088000E0098000E00A8000E00B8000E00C8000E000D5D3031133E0133321615112311342E0223220E021D0123113311A21358325959440C1D31251B3328184444018729306A57FEE10103253C2B18162D452FF002F4FE93000002004D000000AD02B80003000F0082BB00040004000A00042B411B0006000400160004002600040036000400460004005600040066000400760004008600040096000400A6000400B6000400C60004000D5D410500D5000400E5000400025DBA0001000A0004111239B800012FB900000004F400B800004558B800002F1BB9000000053E59BB000D0002000700042B3031332311333714062322263534363332169F44440E1E12121E1E12121E01D4B4151B1B15151B1B0002FFE5FF1000AE02B80013001F00E3BB00140004001A00042B410500DA001A00EA001A00025D411B0009001A0019001A0029001A0039001A0049001A0059001A0069001A0079001A0089001A0099001A00A9001A00B9001A00C9001A000D5DBA0008001A0014111239B800082FB9000B0004F400B800004558B800102F1BB9001000073E59B800004558B800132F1BB9001300073E59BB001D0002001700042BB8001010B900030001F4411B0007000300170003002700030037000300470003005700030067000300770003008700030097000300A7000300B7000300C70003000D5D410500D6000300E6000300025D3031071E0133323E0235113311140E0223222627131406232226353436333216110A170A151A0E05440C1E33280B1E0DC91E12121E1E12121EB003030F1A25160226FDCF1C35291903040371151B1B15151B1B0001005C000000A002F40003001EBB00000004000100042B00B800004558B800002F1BB9000000053E59303133231133A0444402F4000000000100560000031D01E00031010ABB00270004002800042BBB001A0004001B00042BBB000F0004001000042BBA0008001B001A11






00>] def
/CharStrings 26 dict dup begin
/.notdef 0 def
/space 1 def
/A 2 def
/C 3 def
/O 4 def
/a 5 def
/d 6 def
/e 7 def
/h 8 def
/i 9 def
/j 10 def
/l 11 def
/m 12 def
/n 13 def
/o 14 def
/p 15 def
/q 16 def
/r 17 def
/s 18 def
/t 19 def
/u 20 def
/v 21 def
/z 22 def
/acircumflex 23 def
/atilde 24 def
/ccedilla 25 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 4 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] readonly def
/FontBBox {-394 -411 1309 1192} readonly def
/UniqueID 4446589 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB281E4F2B7E4857BF54BFC4169B6E3076DA51F266F2CFA07F908C9D98C19F7C975FF81EA26FD8151DB4E7AF07201C457FEA460E64A0EA742CBB104159BB1C4563F12EFA839314315BD6F84EDD071338DFE51206AA9298BD99A0366A30254D91BFC605F2B4DC3AD70F1CEA1725CCA847A65C005986A7DB71B73D8D6C33FFA4696015B17018B52E0D57578E2577FAA6E9BAAF806D3E9F47693A021757CC49F09C80CC62A02638DB547986AF8963FFC2EB277633FF4248B2AC6624788741C9D3C809CA9A5D323780207BC4D97F8350F1E57EE127672775F1D9B8D41FD6472835F4594E031705D86DC0D3E90A6D4FDCC50CA2A91DA8FD873291C9B487332271E86F5D7AA9ECBD47DAB2A4EB47AA59BD902F440D9CB8D1835BA4B9D194641E44471090E22FC9E8D4C5409129B31449362EF553B7D0FFA193F7C8FFF9ACC28C0B19BEB7E536A5C0129B8E67DD376EBBDA8629AFC4B40F0BCDC62867EEABD4EECABB66FB464139A0F4066D08A0223FAF6093034D0484BBBE9B9BFAF21C80CC53F74769A951F27717C43BC8B83E263B788DF1FA1BC3DB609DFB5ED0B5FCC2AA126F91195F187E58FDB3372EF0BE2B21A3AA80D01AFA458EFEA5311EABAE5E11043297CF73FDED32024530B406146CCE46EB05F68073E5C216BCD1BDA408EB0C326FBD3890DB2ABF389DD2EFEDEC24A91952DCE6A9EB998EFE4D58B4F03C65D274A414E10C7F6E7FF39164FBBE62D316FDD4560D1174049042DC72B9A1343F72967A735BA4BFB3B829D


AB123D1372C7FDE78B37D3B2105C8237469036A1DD09A3F1AD3745FE91213B47400B1E84D2AC2081E1AE95EF4B35D3893B252DBFC50DE450EA8E1F17B08146EDEBA3E70B53B4525003898806D1CAC8AC66FF978BAC6DE08617A1733785EC54A51BC23D94CF0C76019B6318C39B976B51F42F46D2D5EBC0E67CFB1C2A4C3D6C15C9F2B8715DAE46AACC2D5DAFB1F3CBF5B02BF6AC35860838900FD7E6AD85E34992ECF7A840537219BCD80E52CA99AF8532E594747BC8804C9921A42842ECE45C1A02FEC706C775780B2B99D4B3CAD8E7C0452DC2D27B5CAE4A70C0824D9B06A1523C6CEAC2C00C3B7C276389756B1084FA66FCA491850F76077D4A91B97777569E17EF30F3F52A1EDD22002D24FA00518390548AECDFA5769980347C11B46BADD7C2CD7117E30D09B162BC7AD5F15883B64464C729185F618901054F389F46BB27A1AB3D12BD746C7F0AAAD834BBD5BE411D76B890097100BDB46058A1E7C9A810CE39F98C5AD724070634FD3B76BEB78DF85A5966FEF8ED718C92699DCDFCD0EA95D7C893EC09CF04AC6B4CCBB1D8A00895EF5F23D9B69AB804418CC8C84398A781803E4BE3986E8780CC749D94431E092A17739B9F2C7DF1D8259C97CB0AB9DAB60F111FB32E51F8BA82E0532E2C84FCDF56085DD875FD644A32D4B8CCD601EEDC20FD604914E5BE4E5E47F4A3FFF8FEAAECB5AC5C676A516E8A70BF105E17439F2D9999D86510C88E713C64FAA2F9A4FCCAF2C74EA5E14EF6D34815D3DA9FEDE4A8709107B460D06798CA72B1D79F2657D7CAA867AC37CDB6F89543C971CA003A4EA2A3B627B24D44ED7696533F579D86D23AA0BF61E94E68E865F3F0107D7DFA90BF75BA121E98F16B7F4E360521FC37F694A8C901948DD8D539487A6FB2B6D4D793794FB4811C67A679BB86DA03C2D5DCAE565BCCF723CA4118B9BEC1193EABE3960A4A91BCBCA870D9C3125318A0E93CCA6E29EDA12512C221A09564E646A66E3D35C7A714507581E18336D8EAC495E0E1946248374251B2F61F90F065792255CB680F5F61577FB3C3C2AB108EB68438E6470461438B524BC9BA1CF821C114ABDEF6E58A5221551AB4FA061E3D6C1F4822631649328BE63D0252B523226E1FC1447F4ED7D72B5E1FA5819DBA8234AB02862418ACCD61EEE74E1A19A49C718CA087DE0608CAC4C17F2B6B8CB23BCF7A6DC52E8CC075D2EA81E080C9D53ACEA46C53B470EB1DBDE920181E51D520EAB1F3D712D37A3B5D980B629FD11462F2B023DA9593A5498B8F7E4BE230DE3AC8F20CF839EB879CB7CB5E6E7B856D9B32AEE37D2E455AC50765DAA130C62D19AF3CF07494248D7D8A40B0B45D28E1BCF8B8DF8795DB27AB011FBBF9FD4BAB9A034063E191BFAB50EC544CA89084A7C75A78EACAA22097AE22891BE401FE77DB0240C412733B03119C730BA19DAE5449
8BD18A0CF10AB41AD63BB06D4E1C9BAA80097032278F6CFFA1A528BBEFE32028F76583F62795AE1FEF8883C1E0192C71CACB539FC1000C061FF5244C0812675A765CE0CB06D167B6A653184A1C27A6DC7C3608778BBC407E16CDED1149265B7D566C02326DC2671A405DE5E6B020173DE184E6EBA4604BE72C29D0ED52BC687A2837E77472074A5D2D912F39874F26188AE46A63BF0BE8D8589766B33153D9318CB463B93D273E0AA3058D40D566940FCE4D3295BBD3C9481482F86F6290D07138A9A26E4C432D356AA2C7923D485584BF63C9F6A46D7CC164DD29204BDAD9EAECAC8E6D9A74DE0C2F85FBED59A605B946E1BB37C3E4D0B1D799731FF1D880FAB0A90B3A7FD18A7BA157607C952B128E08A1C5386535C846C8D46BDC6CAAC425154704C4384990947ACBC3590B6FCAE681F362AA313F250B2572DB94F9C2C4305B19451A9471A3D9D554E7C920225D714E7C2B8FD69166793A1C2BD6624EF0FC71C9279EF4E7B4BE32B83D172BC85CF835E48CBB837E6A1C71163A4B1BB78ED9279247B1ECEC8F10B9BEB71F44F424A25001F43F0C7A39167724F6D2AE9B680942AA00D092BAB68DDB4B88AE7F49532262417DC2EDF114AE9D1A73E9FAE7BA752B664BC9CDE2EE0721D966EDE0F471833FC4BF441889FB82BC9EEBE0E33632B69239CC8D8A1330606339C0BB640F75026B69906ABA5D3C3953F31534DFFD0FF38C57226D86EEC2E8201A46831E5C8B28ADE16982B05BA6D9BCDEC8145A9554EABA17849C05BCDDF500B5DB96E37DF15C17D12BE938BB03D9208E6B041791B49A5A50A0895AF1E165D40C1A46A31913B48CE73871648B8FA23F9AE946C299E80448DE2C635979C24413E0D6AF57453767D91C4AE6583EA898C58E8B4FB31923D8030A3040DEE69A354276EE8B74A20ED9537A8063879E018D1A8F763B568EE1A39329C3611D01B71CA2F45B11D8841F0743B24AE6A69D9EBF3B963841133F23DB1B9C0EF473252D3AB929DB38F2B2E4F2AD751D47EC3BFA5B5F2B8073328E20A52F06F8957D73C9B645BDBE50F7014B72361C9C3E620D535E257A32BA2DF43760996D3C2BE897C7656FEF05CE437D9907D20A641DD1EE6F69141374D5E6A0DF0D864E819769C3B80860ECF40A461ADDC68F7FE6CCA6E969A89942D802176188AE22C3FE71236F3C9BCB8690FEF6B2177CDED65E54987238E684B286F86501DF3C0719AEDAE839AFB1A38133A1AAA9925C4CA29D7559627CD35C3F9C9C7DB416635785ED6A8E855A960F8D3D7F8CCE93BC81CCFF392BAB9D7580852AF5CC3F7C26FB2E070D53EDCC76AC625297268AB351B0A7544CF3877C832B347805A3CBB03771856E9B8F6A900BC627D253E3F7E054E3826C10B61826EA530B50E60B769A74E4270613AECFE8892E905AE1CF091E5E355BC12E426B92FB7B81790524364470

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%APLT1End
%RBIEndFontSubset
/AvenirNext-Regular cguidfix
/F1.1/AvenirNext-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0.80000001 0.80000001 0.80000001 sc
q
0 0 416 317 rc
39.177906 225 m
39.177906 269 l
39.177906 272.03601 51.497906 274.5 66.67791 274.5 c
81.857903 274.5 94.17791 272.03601 94.17791 269 c
94.17791 225 l
94.17791 221.964 81.857903 219.5 66.67791 219.5 c
51.497906 219.5 39.177906 221.964 39.177906 225 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -118 417 cm
157.1779 192 m
157.1779 148 l
157.1779 144.964 169.49791 142.5 184.6779 142.5 c
199.85791 142.5 212.1779 144.964 212.1779 148 c
212.1779 192 l
212.1779 195.036 199.85791 197.5 184.6779 197.5 c
169.49791 197.5 157.1779 195.036 157.1779 192 c
157.1779 148 m
157.1779 151.036 169.49791 153.5 184.6779 153.5 c
199.85791 153.5 212.1779 151.036 212.1779 148 c
S
0 i
1 0.75 0.75 sc
CM
37.48 71.5 m
37.48 121 l
42.98 126.5 l
92.480003 126.5 l
92.480003 77 l
86.980003 71.5 l
h
37.48 71.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -118 417 cm
155.48 345.5 m
155.48 296 l
160.98 290.5 l
210.48 290.5 l
210.48 340 l
204.98 345.5 l
155.48 345.5 l
155.48 296 m
204.98 296 l
210.48 290.5 l
204.98 296 m
204.98 345.5 l
S
/Cs2 SC
0 sc
0 i
/F1.1[ 12 0 0 -12 0 0]sf
151.918 281.5 m
(!"#$%&'&$"\()[ 8.400000 4.104000 7.620000 6.972000 3.000000 3.804000 6.864000 3.804000 6.972000 4.176000 0.000000 ] xS
150.47791 117.5 m
(\)*+,$+&*-.')[ 8.496000 7.332000 6.972000 3.012000 6.972000 6.972000 3.804000 7.332000 3.000000 7.644000 0.000000 ] xS
151.3179 133.5 m
(&"'%+\(/'+&*)[ 3.804000 4.104000 6.864000 3.000000 6.972000 6.408000 10.596000 6.864000 6.972000 3.804000 0.000000 ] xS
307.08313 264.5 m
(\)*+,$+&*-.')[ 8.496000 7.332000 6.972000 3.012000 6.972000 6.972000 3.804000 7.332000 3.000000 7.644000 0.000000 ] xS
315.24313 280.5 m
(0\(1%.\(23*)[ 5.856000 6.408000 3.024000 3.000000 7.644000 6.408000 6.000000 6.408000 0.000000 ] xS
/Cs1 SC
0.75 1 0.75 sc
CM
351.90714 72.5 m
351.90714 122 l
357.40714 127.5 l
406.90714 127.5 l
406.90714 78 l
401.40714 72.5 l
h
351.90714 72.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -118 417 cm
469.90714 344.5 m
469.90714 295 l
475.40714 289.5 l
524.9071 289.5 l
524.9071 339 l
519.4071 344.5 l
469.90714 344.5 l
469.90714 295 m
519.4071 295 l
524.9071 289.5 l
519.4071 295 m
519.4071 344.5 l
S
0 i
0.80000001 0.80000001 0.80000001 sc
CM
195.78313 78 m
195.78313 122 l
195.78313 125.036 208.10313 127.5 223.28313 127.5 c
238.46313 127.5 250.78313 125.036 250.78313 122 c
250.78313 78 l
250.78313 74.963997 238.46313 72.5 223.28313 72.5 c
208.10313 72.5 195.78313 74.963997 195.78313 78 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -118 417 cm
313.78314 339 m
313.78314 295 l
313.78314 291.96399 326.10312 289.5 341.28314 289.5 c
356.46313 289.5 368.78314 291.96399 368.78314 295 c
368.78314 339 l
368.78314 342.03601 356.46313 344.5 341.28314 344.5 c
326.10312 344.5 313.78314 342.03601 313.78314 339 c
313.78314 295 m
313.78314 298.03601 326.10312 300.5 341.28314 300.5 c
356.46313 300.5 368.78314 298.03601 368.78314 295 c
S
/Cs2 SC
0 sc
0 i
466.34512 264.5 m
(!"#$%&'&$"\()[ 8.400000 4.104000 7.620000 6.972000 3.000000 3.804000 6.864000 3.804000 6.972000 4.176000 0.000000 ] xS
470.65912 280.5 m
(*&%/%4\(.\()[ 7.332000 3.804000 3.000000 10.596000 3.000000 5.304000 6.408000 7.644000 0.000000 ] xS
2 w
0.60000002 i
/Cs1 SC
0 0 0 sc
342 353 m
341.5 374.5 l
119.88086 374.5 l
120.5 172.5 l
137.60001 172.5 l
S
0 i
CM
29.200001 244.5 m
19.6 248.10001 l
19.6 240.89999 l
h
29.200001 244.5 m
f
0 J
0 j
1 0 0 -1 -118 417 cm
147.2 172.5 m
137.60001 168.89999 l
137.60001 176.10001 l
h
147.2 172.5 m
S
1 J
1 j
0.60000002 i
226.22113 318 m
283.32114 318 l
S
0 i
CM
174.92113 99 m
165.32114 102.6 l
165.32114 95.400002 l
h
174.92113 99 m
f
0 J
0 j
1 0 0 -1 -118 417 cm
292.92114 318 m
283.32114 314.39999 l
283.32114 321.60001 l
h
292.92114 318 m
S
/Cs2 SC
0 sc
191.16043 391.5 m
(5&%/%4\(23*-.')[ 10.200000 3.804000 3.000000 10.596000 3.000000 5.304000 6.408000 6.000000 6.408000 7.332000 3.000000 7.644000 0.000000 ] xS
185.22043 407.5 m
(6%7'"7\("8/'&"*9)[ 6.996000 3.000000 7.620000 6.864000 4.320000 7.620000 6.408000 4.176000 6.408000 10.596000 6.864000 3.804000 4.104000 7.332000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
181.48 206.5 m
181.48 206.5 181.48 231.62619 181.48 247.59998 c
S
0 i
CM
63.48 159.8 m
67.080002 169.39999 l
59.880001 169.39999 l
h
63.48 159.8 m
f
0 J
0 j
1 0 0 -1 -118 417 cm
181.48 257.20001 m
185.08 247.60001 l
177.88 247.60001 l
h
181.48 257.20001 m
S
1 J
1 j
0.60000002 i
386.34512 318 m
443.44513 318 l
S
0 i
CM
335.04514 99 m
325.44513 102.6 l
325.44513 95.400002 l
h
335.04514 99 m
f
0 J
0 j
1 0 0 -1 -118 417 cm
453.04514 318 m
443.44513 314.39999 l
443.44513 321.60001 l
h
453.04514 318 m
S
ep
end
%%Trailer
%%EOF
